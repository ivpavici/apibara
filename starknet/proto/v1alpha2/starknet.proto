// Apibara StarkNet Support
syntax = "proto3";

package apibara.starknet.v1alpha2;

import "google/protobuf/timestamp.proto";

// A StarkNet block.
message Block {
  BlockStatus status = 1;
  BlockHeader header = 2;
  repeated Transaction transactions = 3;
  repeated TransactionReceipt receipts = 4;
  StateUpdate state_update = 5;
}

// Block header.
message BlockHeader {
  BlockHash block_hash = 1;
  BlockHash parent_block_hash = 2;
  uint64 block_number = 3;
  bytes sequencer_address = 4;
  bytes new_root = 5;
  google.protobuf.Timestamp timestamp = 6;
}

// Status of a block.
enum BlockStatus {
  BLOCK_STATUS_UNSPECIFIED = 0;
  BLOCK_STATUS_PENDING = 1;
  BLOCK_STATUS_ACCEPTED_ON_L2 = 2;
  BLOCK_STATUS_ACCEPTED_ON_L1 = 3;
  BLOCK_STATUS_REJECTED = 4;
}

// The hash of a StarkNet block.
message BlockHash { bytes hash = 1; }

// Status of a transaction.
enum TransactionStatus {
  TRANSACTION_STATUS_UNSPECIFIED = 0;
  TRANSACTION_STATUS_RECEIVED = 1;
  TRANSACTION_STATUS_PENDING = 2;
  TRANSACTION_STATUS_ACCEPTED_ON_L2 = 3;
  TRANSACTION_STATUS_ACCEPTED_ON_L1 = 4;
  TRANSACTION_STATUS_REJECTED = 5;
}

message Transaction {
  TransactionMeta meta = 1;
  oneof transaction {
    InvokeTransactionV0 invoke_v0 = 2;
    InvokeTransactionV1 invoke_v1 = 3;
    DeployTransaction deploy = 4;
    DeclareTransaction declare = 5;
    L1HandlerTransaction l1_handler = 6;
    DeployAccountTransaction deploy_account = 7;
  }
}

message TransactionMeta {
  bytes hash = 1;
  bytes max_fee = 2;
  repeated bytes signature = 3;
  bytes nonce = 4;
  uint64 version = 5;
}

message InvokeTransactionV0 {
  bytes contract_address = 1;
  bytes entry_point_selector = 2;
  repeated bytes calldata = 3;
}

message InvokeTransactionV1 {
  bytes sender_address = 1;
  repeated bytes calldata = 2;
}

message DeclareTransaction {
  bytes class_hash = 1;
  bytes sender_address = 2;
}

message DeployTransaction {
  repeated bytes constructor_calldata = 2;
  bytes contract_address_salt = 3;
  bytes class_hash = 4;
}

message L1HandlerTransaction {
  bytes contract_address = 2;
  bytes entry_point_selector = 3;
  repeated bytes calldata = 4;
}

message DeployAccountTransaction {
  repeated bytes constructor_calldata = 2;
  bytes contract_address_salt = 3;
  bytes class_hash = 4;
}

message TransactionReceipt {
  bytes transaction_hash = 1;
  uint64 transaction_index = 2;
  bytes actual_fee = 3;
  // ExecutionResources execution_resources = 4;
  // L1ToL2Message l1_to_l2_consumed_message = 5;
  repeated L2ToL1Message l2_to_l1_messages = 6;
  repeated Event events = 7;
}

message ExecutionResources {
  uint64 n_steps = 1;
  uint64 n_memory_holes = 2;
  BuiltinInstanceCounter builtin_instance_counter = 3;
}

message BuiltinInstanceCounter {
  optional uint64 pedersen_builtin = 1;
  optional uint64 range_check_builtin = 2;
  optional uint64 bitwise_builtin = 3;
  optional uint64 output_builtin = 4;
  optional uint64 ecdsa_builtin = 5;
  optional uint64 ec_op_builtin = 6;
}

message L1ToL2Message {
  bytes from_address = 1;
  bytes to_address = 2;
  bytes selector = 3;
  repeated bytes payload = 4;
  bytes nonce = 5;
}

message L2ToL1Message {
  bytes to_address = 1;
  repeated bytes payload = 2;
}

message Event {
  bytes from_address = 1;
  repeated bytes keys = 2;
  repeated bytes data = 3;
}

message StateUpdate {
  bytes new_root = 1;
  bytes old_root = 2;
  StateDiff state_diff = 3;
}

message StateDiff {
  repeated StorageDiff storage_diffs = 1;
  repeated DeclaredContract declared_contracts = 2;
  repeated DeployedContract deployed_contracts = 3;
  repeated NonceUpdate nonces = 4;
}

message StorageDiff {
  bytes contract_address = 1;
  repeated StorageEntry storage_entries = 2;
}

message StorageEntry {
  bytes key = 1;
  bytes value = 2;
}

message DeclaredContract {
  bytes class_hash = 1;
}

message DeployedContract {
  bytes contract_address = 1;
  bytes class_hash = 2;
}

message NonceUpdate {
  bytes contract_address = 1;
  bytes nonce = 2;
}